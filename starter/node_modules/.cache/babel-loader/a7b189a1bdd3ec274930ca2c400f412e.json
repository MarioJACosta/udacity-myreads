{"ast":null,"code":"var _jsxFileName = \"/home/mario/projects/udacity-myreads/starter/src/components/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from \"prop-types\";\nimport * as BooksApi from \"../utils/BooksAPI\";\nimport { useEffect, useState } from \"react\";\nimport BookList from \"./BookList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = ({\n  toggleShowSearchPage\n}) => {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const updateQuery = query => {\n    setQuery(query.trim());\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    query !== \"\" ? searchBooks(query) : setSearchedBooks([]);\n  }, [query]);\n\n  const searchBooks = async query => {\n    let response = await BooksApi.search(query, 10);\n    response.error ? setSearchedBooks([]) : setSearchedBooks(response);\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"close-search\",\n        onClick: () => toggleShowSearchPage(),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by title, author, or ISBN\",\n          onChange: event => updateQuery(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: searchedBooks.length === 0 && query !== \"\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"There are no books\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(BookList, {\n        books: searchedBooks,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 13\n  }, this);\n};\n\n_s(SearchBar, \"cbHUJgzS4tND6htXNcnreRNuXn4=\");\n\n_c = SearchBar;\nSearchBar.propTypes = {\n  toggleShowSearchPage: PropTypes.func.isRequired\n};\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/mario/projects/udacity-myreads/starter/src/components/SearchBar.js"],"names":["PropTypes","BooksApi","useEffect","useState","BookList","SearchBar","toggleShowSearchPage","query","setQuery","searchedBooks","setSearchedBooks","isLoading","setIsLoading","updateQuery","trim","searchBooks","response","search","error","event","target","value","length","propTypes","func","isRequired"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,mBAA1B;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA4B;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMU,WAAW,GAAIN,KAAD,IAAW;AAC3BC,IAAAA,QAAQ,CAACD,KAAK,CAACO,IAAN,EAAD,CAAR;AACH,GAFD;;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,IAAAA,KAAK,KAAK,EAAV,GAAeQ,WAAW,CAACR,KAAD,CAA1B,GAAoCG,gBAAgB,CAAC,EAAD,CAApD;AACH,GAHQ,EAGN,CAACH,KAAD,CAHM,CAAT;;AAKA,QAAMQ,WAAW,GAAG,MAAOR,KAAP,IAAiB;AACjC,QAAIS,QAAQ,GAAG,MAAMf,QAAQ,CAACgB,MAAT,CAAgBV,KAAhB,EAAuB,EAAvB,CAArB;AACAS,IAAAA,QAAQ,CAACE,KAAT,GAAiBR,gBAAgB,CAAC,EAAD,CAAjC,GAAwCA,gBAAgB,CAACM,QAAD,CAAxD;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACI;AACI,QAAA,SAAS,EAAC,cADd;AAEI,QAAA,OAAO,EAAE,MAAMN,oBAAoB,EAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,WAAW,EAAC,kCAFhB;AAGI,UAAA,QAAQ,EAAGa,KAAD,IAAWN,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd;AAHpC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAgBI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,gBAEQZ,aAAa,CAACa,MAAd,KAAyB,CAAzB,IAA8Bf,KAAK,KAAK,EAAxC,gBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,gBAII,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEE,aAAjB;AAAgC,QAAA,SAAS,EAAEE;AAA3C;AAAA;AAAA;AAAA;AAAA;AANZ;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CAhDL;;GAAMN,S;;KAAAA,S;AAmDNA,SAAS,CAACkB,SAAV,GAAsB;AAClBjB,EAAAA,oBAAoB,EAAEN,SAAS,CAACwB,IAAV,CAAeC;AADnB,CAAtB;AAIA,eAAepB,SAAf","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport * as BooksApi from \"../utils/BooksAPI\"\r\nimport {useEffect, useState} from \"react\";\r\nimport BookList from \"./BookList\";\r\n\r\nconst SearchBar = ({toggleShowSearchPage}) => {\r\n        const [query, setQuery] = useState(\"\")\r\n        const [searchedBooks, setSearchedBooks] = useState([]);\r\n        const [isLoading, setIsLoading] = useState(false);\r\n\r\n        const updateQuery = (query) => {\r\n            setQuery(query.trim())\r\n        }\r\n\r\n        useEffect(() => {\r\n            setIsLoading(true)\r\n            query !== \"\" ? searchBooks(query) : setSearchedBooks([])\r\n        }, [query])\r\n\r\n        const searchBooks = async (query) => {\r\n            let response = await BooksApi.search(query, 10);\r\n            response.error ? setSearchedBooks([]) : setSearchedBooks(response);\r\n            setIsLoading(false)\r\n        };\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <a\r\n                        className=\"close-search\"\r\n                        onClick={() => toggleShowSearchPage()}\r\n                    >\r\n                        Close\r\n                    </a>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title, author, or ISBN\"\r\n                            onChange={(event) => updateQuery(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    {\r\n                        searchedBooks.length === 0 && query !== \"\"\r\n                            ?\r\n                            <span>There are no books</span>\r\n                            :\r\n                            <BookList books={searchedBooks} isLoading={isLoading}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n;\r\n\r\nSearchBar.propTypes = {\r\n    toggleShowSearchPage: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}