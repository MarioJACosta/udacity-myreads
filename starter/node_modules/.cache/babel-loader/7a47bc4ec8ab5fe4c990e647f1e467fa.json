{"ast":null,"code":"var _jsxFileName = \"/home/mario/projects/udacity-myreads/starter/src/components/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport * as BooksApi from \"../utils/BooksAPI\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport BookListContent from \"./BookListContent\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport EmptySearch from \"./EmptySearch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = ({\n  books,\n  updateBooks\n}) => {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const updateQuery = query => {\n    setQuery(query.trim());\n  };\n\n  const searchBooks = useCallback(async () => {\n    setIsLoading(true);\n\n    if (query !== \"\") {\n      await BooksApi.search(query, 10).then(response => {\n        if (response.error) {\n          setSearchedBooks([]);\n        } else {\n          response.forEach(searchedBook => {\n            searchedBook.shelf = 'none';\n            books.forEach(book => {\n              if (book.id === searchedBook.id) {\n                searchedBook.shelf = book.shelf;\n              }\n            });\n          });\n          setSearchedBooks(response);\n        }\n      });\n      setIsLoading(false);\n    }\n  }, [setIsLoading, query, setSearchedBooks, books]);\n  useEffect(() => {\n    query !== \"\" ? searchBooks() : setSearchedBooks([]);\n  }, [query, searchBooks, setSearchedBooks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"close-search\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by title, author, or ISBN\",\n          onChange: event => updateQuery(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: searchedBooks.length === 0 && query !== \"\" && !isLoading ? /*#__PURE__*/_jsxDEV(EmptySearch, {\n        query: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(BookListContent, {\n        books: searchedBooks,\n        isLoading: isLoading,\n        updateBooks: updateBooks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBar, \"fxVVS6ZxXZDo/YNQmuxfLY0NODI=\");\n\n_c = SearchBar;\nSearchBar.propTypes = {\n  books: PropTypes.array.isRequired,\n  updateBooks: PropTypes.func.isRequired\n};\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/mario/projects/udacity-myreads/starter/src/components/SearchBar.js"],"names":["BooksApi","useCallback","useEffect","useState","BookListContent","Link","PropTypes","EmptySearch","SearchBar","books","updateBooks","query","setQuery","searchedBooks","setSearchedBooks","isLoading","setIsLoading","updateQuery","trim","searchBooks","search","then","response","error","forEach","searchedBook","shelf","book","id","event","target","value","length","propTypes","array","isRequired","func"],"mappings":";;;AAAA,OAAO,KAAKA,QAAZ,MAA0B,mBAA1B;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAA0B;AAAA;;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMc,WAAW,GAAIN,KAAD,IAAW;AAC3BC,IAAAA,QAAQ,CAACD,KAAK,CAACO,IAAN,EAAD,CAAR;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAGlB,WAAW,CAAC,YAAY;AACxCe,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAIL,KAAK,KAAK,EAAd,EAAkB;AACd,YAAMX,QAAQ,CAACoB,MAAT,CAAgBT,KAAhB,EAAuB,EAAvB,EACDU,IADC,CACKC,QAAD,IAAc;AAChB,YAAIA,QAAQ,CAACC,KAAb,EAAoB;AAChBT,UAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACH,SAFD,MAEO;AACHQ,UAAAA,QAAQ,CAACE,OAAT,CAAkBC,YAAD,IAAkB;AAC/BA,YAAAA,YAAY,CAACC,KAAb,GAAqB,MAArB;AACAjB,YAAAA,KAAK,CAACe,OAAN,CAAeG,IAAD,IAAU;AACpB,kBAAIA,IAAI,CAACC,EAAL,KAAYH,YAAY,CAACG,EAA7B,EAAiC;AAC7BH,gBAAAA,YAAY,CAACC,KAAb,GAAqBC,IAAI,CAACD,KAA1B;AACH;AACJ,aAJD;AAKH,WAPD;AAQAZ,UAAAA,gBAAgB,CAACQ,QAAD,CAAhB;AACH;AACJ,OAfC,CAAN;AAgBAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAtB8B,EAsB5B,CAACA,YAAD,EAAeL,KAAf,EAAsBG,gBAAtB,EAAwCL,KAAxC,CAtB4B,CAA/B;AAwBAP,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,KAAK,EAAV,GAAeQ,WAAW,EAA1B,GAA+BL,gBAAgB,CAAC,EAAD,CAA/C;AACH,GAFQ,EAEN,CAACH,KAAD,EAAQQ,WAAR,EAAqBL,gBAArB,CAFM,CAAT;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACI,QAAC,IAAD;AACI,QAAA,EAAE,EAAC,GADP;AAEI,QAAA,SAAS,EAAC,cAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,WAAW,EAAC,kCAFhB;AAGI,UAAA,QAAQ,EAAGe,KAAD,IAAWZ,WAAW,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd;AAHpC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAgBI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,gBAEQlB,aAAa,CAACmB,MAAd,KAAyB,CAAzB,IAA8BrB,KAAK,KAAK,EAAxC,IAA8C,CAACI,SAA/C,gBACM,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEJ;AAApB;AAAA;AAAA;AAAA;AAAA,cADN,gBAEM,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAEE,aAAxB;AAAuC,QAAA,SAAS,EAAEE,SAAlD;AAA6D,QAAA,WAAW,EAAEL;AAA1E;AAAA;AAAA;AAAA;AAAA;AAJd;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH,CAhED;;GAAMF,S;;KAAAA,S;AAkENA,SAAS,CAACyB,SAAV,GAAsB;AAClBxB,EAAAA,KAAK,EAAEH,SAAS,CAAC4B,KAAV,CAAgBC,UADL;AAElBzB,EAAAA,WAAW,EAAEJ,SAAS,CAAC8B,IAAV,CAAeD;AAFV,CAAtB;AAKA,eAAe3B,SAAf","sourcesContent":["import * as BooksApi from \"../utils/BooksAPI\"\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport BookListContent from \"./BookListContent\";\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport EmptySearch from \"./EmptySearch\";\r\n\r\nconst SearchBar = ({books, updateBooks}) => {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [searchedBooks, setSearchedBooks] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const updateQuery = (query) => {\r\n        setQuery(query.trim());\r\n    };\r\n\r\n    const searchBooks = useCallback(async () => {\r\n        setIsLoading(true);\r\n\r\n        if (query !== \"\") {\r\n            await BooksApi.search(query, 10)\r\n                .then((response) => {\r\n                    if (response.error) {\r\n                        setSearchedBooks([]);\r\n                    } else {\r\n                        response.forEach((searchedBook) => {\r\n                            searchedBook.shelf = 'none';\r\n                            books.forEach((book) => {\r\n                                if (book.id === searchedBook.id) {\r\n                                    searchedBook.shelf = book.shelf;\r\n                                }\r\n                            });\r\n                        });\r\n                        setSearchedBooks(response);\r\n                    }\r\n                });\r\n            setIsLoading(false);\r\n        }\r\n    }, [setIsLoading, query, setSearchedBooks, books]);\r\n\r\n    useEffect(() => {\r\n        query !== \"\" ? searchBooks() : setSearchedBooks([]);\r\n    }, [query, searchBooks, setSearchedBooks]);\r\n\r\n\r\n    return (\r\n        <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n                <Link\r\n                    to=\"/\"\r\n                    className=\"close-search\"\r\n                >\r\n                    Close\r\n                </Link>\r\n                <div className=\"search-books-input-wrapper\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by title, author, or ISBN\"\r\n                        onChange={(event) => updateQuery(event.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n                {\r\n                    searchedBooks.length === 0 && query !== \"\" && !isLoading\r\n                        ? <EmptySearch query={query}/>\r\n                        : <BookListContent books={searchedBooks} isLoading={isLoading} updateBooks={updateBooks}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nSearchBar.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    updateBooks: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SearchBar;\r\n"]},"metadata":{},"sourceType":"module"}